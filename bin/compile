#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# debug
# set -x

# clean up leaking environment
unset GIT_DIR

# config
PGBOUNCER_VERSION="1.5.4"
STUNNEL_VERSION="4.56"
S3_BUCKET="heroku-buildpack-pgbouncer"

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
LP_DIR=`cd $(dirname $0); cd ..; pwd`

function error() {
  echo " !     $*" >&2
  exit 1
}

function mktmpdir() {
  dir=$(mktemp -t pgbouncer-$1-XXXX)
  rm -rf $dir
  mkdir -p $dir
  echo $dir
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function manifest_versions() {
  curl "http://${S3_BUCKET}.s3.amazonaws.com/manifest.${1}" -s -o - | tr -s '\n' ' '
}

echo "Using pgbouncer version: ${PGBOUNCER_VERSION}" | indent

echo "Using stunnel version: ${STUNNEL_VERSION}" | indent

# s3 packages
PGBOUNCER_PACKAGE="http://${S3_BUCKET}.s3.amazonaws.com/pgbouncer-${PGBOUNCER_VERSION}.tgz"
STUNNEL_PACKAGE="http://${S3_BUCKET}.s3.amazonaws.com/stunnel-${STUNNEL_VERSION}.tgz"

# vendor directories
VENDORED_PGBOUNCER="$(mktmpdir pgbouncer)"
VENDORED_STUNNEL="$(mktmpdir stunnel)"

# download and unpack packages
echo "-----> Fetching pgbouncer binaries"
package_download "pgbouncer" "${PGBOUNCER_VERSION}" "${VENDORED_PGBOUNCER}"
package_download "stunnel" "${STUNNEL_VERSION}" "${VENDORED_STUNNEL}"

# vendor pgbouncer into the slug
PATH="$BUILD_DIR/bin:$PATH"
echo "-----> Vendoring pgbouncer into slug"
mkdir -p "$BUILD_DIR/bin"
cp "$VENDORED_PGBOUNCER/bin/pgbouncer" "$BUILD_DIR/bin/pgbouncer"

echo "-----> Building runtime environment"
mkdir -p $BUILD_DIR/.profile.d
echo "export PATH=\"\$HOME/bin:\$HOME/pgbouncer_modules/.bin:\$PATH\"" > $BUILD_DIR/.profile.d/pgbouncer.sh

MONIT_BINARY="https://heroku-monit.s3.amazonaws.com/monit-5.4.tgz"
MONIT_VENDOR="vendor/monit"

GETTEXT_BINARY="http://heroku-monit.s3.amazonaws.com/gettext-0.18.tgz"
GETTEXT_VENDOR="vendor/gettext"

# Vendor Monit
echo "-----> Downloading monit"
echo "$1/$MONIT_VENDOR"
mkdir -p $1/$MONIT_VENDOR
curl $MONIT_BINARY -o - | tar -xz -C $1/$MONIT_VENDOR -f -

# Vendor GNU gettext
echo "-----> Downloading gettext"
mkdir -p $1/$GETTEXT_VENDOR
curl $GETTEXT_BINARY -o - | tar -xz -C $1/$GETTEXT_VENDOR -f -

mkdir -p $1/bin

echo "-----> Generating the boot script"
cat >>$1/bin/boot.sh <<'EOF'
#!/usr/bin/env bash

mkdir -p conf.d
mkdir -p tmp/conf

if [ "$SYSTEM_NAME" == "" ]; then
  export SYSTEM_NAME=Heroku
fi

for f in `ls conf.d`
do
  echo "Processing conf.d/$f file..."
  (cat  conf.d/$f | vendor/gettext/bin/envsubst) > tmp/conf/$f.tmp && mv tmp/conf/$f.tmp conf.d/$f
done

(cat monitrc | vendor/gettext/bin/envsubst) > monitrc.tmp && mv monitrc.tmp monitrc

vendor/monit/bin/monit -c monitrc -p tmp/.monit.pid -s tmp/.monit.state -I
EOF
chmod +x $1/bin/boot.sh

echo "-----> Done"
